name: Create Release and Compare to Last "real" Release

on:
  workflow_dispatch:

jobs:
  create_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # üî¢ Generar un nuevo tag para el release
      - name: Generate new version tag
        id: generate_tag
        run: |
          new_tag="releas-v1.0.0-$(date +%Y%m%d%H%M%S)"
          echo "new_tag=$new_tag" >> $GITHUB_ENV

      # üîç Obtener el √∫ltimo release cuyo NOMBRE comience con "real"
      - name: Get last release starting with "real"
        id: get_last_real_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          last_real_release=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases" | \
            jq -r '[.[] | select(.name | test("^real"))] | sort_by(.published_at) | last')

          last_real_tag=$(echo "$last_real_release" | jq -r '.tag_name')
          echo "$last_real_tag"
  
          if [[ -z "$last_real_tag" || "$last_real_tag" == "null" ]]; then
            echo "No previous 'real' release found. Skipping compare."
            exit 0
          fi

          echo "last_real_tag=$last_real_tag" >> $GITHUB_ENV

      - name: Create Release without Notes
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.new_tag }}
          release_name: Release ${{ env.new_tag }}
          body: ""
          draft: false
          prerelease: false
          
      - name: Generate Release Notes
        id: generate_release_notes
        run: |
          # URL para generar las notas del release
          notes_url="https://api.github.com/repos/${{ github.repository }}/releases/generate-notes"
          
          # Hacer la solicitud a la API para generar las notas del release
          notes_data=$(curl -s -X POST "$notes_url" \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{
              "tag_name": "${{ env.new_tag }}",
              "target_commitish": "main",
              "previous_tag_name": "${{ env.last_real_tag }}"
            }')
      
          # Extraer los PRs y sus ramas de origen (head.ref) desde los datos de la respuesta
          pr_info=$(echo "$notes_data" | jq -r '.pr_summary[] | "- [\(.title)](https://github.com/\(.user.login)/proyecto-de-mate/pull/\(.number)) from branch: \(.head.ref) by @\(.user.login)"')
      
          # Guardar la informaci√≥n de los PRs formateados
          echo "pr_info<<EOF" >> $GITHUB_ENV
          echo "$pr_info" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          
      - name: Update Release with Notes
        id: update_release
        run: |
          # Obtener el ID del release creado
          release_id=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.new_tag }}" | jq -r '.id')
      
          # Actualizar el release con las notas
          update_url="https://api.github.com/repos/${{ github.repository }}/releases/$release_id"
          update_data=$(curl -s -X PATCH "$update_url" \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{
              "body": "${{ env.changelog }}"
            }')
      
          echo "Release updated with notes"
