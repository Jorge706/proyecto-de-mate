name: Create Release and Get PRs

on:
  workflow_dispatch:

jobs:
  create_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get the latest release tag
        id: get_latest_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest_tag=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)

          if [[ "$latest_tag" == "null" ]]; then
            new_tag="v1.0.0"
          else
            new_tag=$(echo $latest_tag | awk -F. '{$NF+=1; OFS="."; print $0}')
          fi

          echo "tag=$new_tag" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.tag }}
          release_name: Release ${{ env.tag }}
          body: "Creating release..."
          draft: false
          prerelease: false

      - name: Get pull requests since last release
        id: get_prs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest_release=${{ env.tag }}
          echo "Latest release: $latest_release"
          prs=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls?state=closed&sort=updated&direction=desc" | \
            jq -r --arg latest_release "$latest_release" '[.[] | select(.merged_at != null and .merged_at > $latest_release)] | .[] | "- PR #\(.number): \(.title) (\(.html_url))"')
          echo "prs=$prs" >> $GITHUB_ENV

      - name: Print pull requests
        run: |
          echo "Pull Requests since last release:"
          echo "${{ env.prs }}"

      - name: Update Release with Changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          release_id=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.tag }}" | jq -r .id)
          changelog="${{ env.prs }}"
          curl -s -X PATCH -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d "{\"body\": \"## Pull Requests since last release\n$changelog\"}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/$release_id"
