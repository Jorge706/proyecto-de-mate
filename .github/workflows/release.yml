name: Create Release and Get PRs

on:
  workflow_dispatch:

jobs:
  create_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # 🔍 Obtener el último tag que empiece con "releas"
      - name: Get latest release tag starting with "releas"
        id: get_latest_releas_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest_releas_tag=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases" | \
            jq -r '[.[] | select(.tag_name | test("^releas"))] | sort_by(.published_at) | last | .tag_name')

          if [[ "$latest_releas_tag" == "null" ]]; then
            latest_releas_tag="releas-v0.0.0"
          fi

          echo "latest_releas_tag=$latest_releas_tag" >> $GITHUB_ENV

      # 🔢 Generar nuevo tag automáticamente basado en el último "releas"
      - name: Generate new version tag
        id: generate_tag
        run: |
          IFS='.' read -ra VERSION <<< "${{ env.latest_releas_tag }}"
          new_tag="releas-v${VERSION[0]}.$((VERSION[1] + 1)).0"
          echo "new_tag=$new_tag" >> $GITHUB_ENV

      # 🔍 Obtener los cambios desde el último "releas" release
      - name: Get commit and PR changes
        id: get_changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          compare_url="https://api.github.com/repos/${{ github.repository }}/compare/${{ env.latest_releas_tag }}...main"
          compare_data=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$compare_url")

          pr_list=$(echo "$compare_data" | jq -r '.commits[] | select(.commit.message | test("#[0-9]+")) | "- \(.commit.message)"')
          commit_list=$(echo "$compare_data" | jq -r '.commits[] | "- \(.commit.message)"')

          echo "pr_list<<EOF" >> $GITHUB_ENV
          echo "$pr_list" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "commit_list<<EOF" >> $GITHUB_ENV
          echo "$commit_list" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # 📢 Crear Release con las release notes generadas
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.new_tag }}
          release_name: Release ${{ env.new_tag }}
          body: |
            ## 🚀 Changes in this release
            
            ### 🔥 Pull Requests Merged
            ${{ env.pr_list }}

            ### 📌 Commits
            ${{ env.commit_list }}

          draft: false
          prerelease: false
