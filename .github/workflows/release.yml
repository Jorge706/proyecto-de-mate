name: Create Release and Compare to Last "real" Release

on:
  workflow_dispatch:

jobs:
  create_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # üî¢ Generar un nuevo tag para el release
      - name: Generate new version tag
        id: generate_tag
        run: |
          new_tag="releas-v1.0.0-$(date +%Y%m%d%H%M%S)"
          echo "new_tag=$new_tag" >> $GITHUB_ENV

      # üîç Obtener el √∫ltimo release cuyo NOMBRE comience con "real"

      - name: Get last release starting with "real"
        id: get_last_real_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          page=1
          last_real_tag=""

          while true; do
            echo "Fetching page $page..."
            releases_data=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases?per_page=100&page=$page")

            # Si la respuesta est√° vac√≠a, terminamos
            if [[ "$releases_data" == "[]" || -z "$releases_data" ]]; then
              break
            fi

            # Buscar el release cuyo nombre comience con "real"
            last_real_release=$(echo "$releases_data" | jq -r '[.[] | select(.name | test("^real"))] | sort_by(.published_at) | last')

            # Si encontramos un release v√°lido, tomamos su tag y salimos del bucle
            if [[ "$last_real_release" != "null" ]]; then
              last_real_tag=$(echo "$last_real_release" | jq -r '.tag_name')
              break
            fi

            # Pasar a la siguiente p√°gina
            ((page++))
          done

          echo "Last real release tag: $last_real_tag"

          if [[ -z "$last_real_tag" || "$last_real_tag" == "null" ]]; then
            echo "‚ùå No previous 'real' release found. Skipping compare."
            exit 0
          fi

          echo "last_real_tag=$last_real_tag" >> $GITHUB_ENV


      # üîç Obtener cambios entre el √∫ltimo "real" release y el nuevo
            # üîç Obtener cambios entre el √∫ltimo "real" release y el nuevo
      - name: Get changes between releases
        id: get_changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          notes_url="https://api.github.com/repos/${{ github.repository }}/releases/generate-notes"
          
          notes_data=$(curl -s -X POST "$notes_url" \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{
              "tag_name": "${{ env.new_tag }}",
              "target_commitish": "main",
              "previous_tag_name": "${{ env.last_real_tag }}"
            }')

          echo "$last_real_tag"
          echo "$notes_data"
      
          # Extraer los release notes generados
          release_notes=$(echo "$notes_data" | jq -r '.body')

          # Crear listas para cada categor√≠a de PRs
          feature_prs=()
          bug_prs=()
          other_prs=()

          # Extraer las l√≠neas que contienen PRs
          while IFS= read -r line; do
            title=$(echo "$line" | jq -r '.title')
            pr_number=$(echo "$line" | jq -r '.number')
            branch=$(echo "$line" | jq -r '.head.ref')

            case "$branch" in
              test/*)
                feature_prs+=("- #$pr_number $title")
                ;;
              bug/*)
                bug_prs+=("- #$pr_number $title")
                ;;
              *)
                other_prs+=("- #$pr_number $title")
                ;;
            esac
          done <<< "$(echo "$notes_data" | jq -c '.[] | select(.title | test("^(feat|fix): "))')"

          # Imprimir las listas
          echo "Feature PRs: ${feature_prs[@]}"
          echo "Bug PRs: ${bug_prs[@]}"
          echo "Other PRs: ${other_prs[@]}"
