name: Create Release and Compare to Last "real" Release

on:
  workflow_dispatch:

jobs:
  create_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # üî¢ Generar un nuevo tag para el release
      - name: Generate new version tag
        id: generate_tag
        run: |
          new_tag="releas-v1.0.0-$(date +%Y%m%d%H%M%S)"
          echo "new_tag=$new_tag" >> $GITHUB_ENV

      # üì¢ Crear el Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.new_tag }}
          release_name: Release ${{ env.new_tag }}
          body: "Auto-generated release"
          draft: false
          prerelease: false

      # üîç Obtener el √∫ltimo release cuyo NOMBRE comience con "real"
      - name: Get last release starting with "real"
        id: get_last_real_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          last_real_release=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases" | \
            jq -r '[.[] | select(.name | test("^real"))] | sort_by(.published_at) | last')

          last_real_tag=$(echo "$last_real_release" | jq -r '.tag_name')

          if [[ -z "$last_real_tag" || "$last_real_tag" == "null" ]]; then
            echo "No previous 'real' release found. Skipping compare."
            exit 0
          fi

          echo "last_real_tag=$last_real_tag" >> $GITHUB_ENV

      # üîç Obtener cambios entre el √∫ltimo "real" release y el nuevo
      - name: Get changes between releases
        id: get_changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          compare_url="https://api.github.com/repos/${{ github.repository }}/compare/${{ env.last_real_tag }}...${{ env.new_tag }}"
          compare_data=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$compare_url")

          # Extraer PRs y commits
          pr_list=$(echo "$compare_data" | jq -r '.commits[] | select(.commit.message | test("#[0-9]+")) | "- \(.commit.message)"')
          commit_list=$(echo "$compare_data" | jq -r '.commits[] | "- \(.commit.message)"')

          echo "pr_list<<EOF" >> $GITHUB_ENV
          echo "$pr_list" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "commit_list<<EOF" >> $GITHUB_ENV
          echo "$commit_list" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # üîÑ Actualizar el Release con los cambios detectados
      - name: Update Release with Changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          release_id=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$new_tag" | jq -r .id)

          # Construir changelog con el formato deseado
          changelog="## What's Changed\n"
          changelog+="$pr_list\n"  # Aqu√≠ agregamos los PRs, ya formateados
          changelog+="\n## New Contributors\n"
          changelog+="$contributors_list\n"  # Aqu√≠ agregamos los nuevos contribuyentes
          changelog+="\n**Full Changelog**: https://github.com/${{ github.repository }}/compare/$last_real_tag...$new_tag"

          # Asegurarse de que el changelog sea una cadena v√°lida para JSON
          changelog=$(echo "$changelog" | jq -Rs .)

          # Actualizar el release con el changelog en formato bonito (Markdown)
          curl -s -X PATCH -H "Authorization: token $GITHUB_TOKEN" \
            -d "{\"body\": $changelog}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/$release_id"

          echo "‚úÖ Release updated with changelog!"



