name: Create Release and Compare to Last "real" Release

on:
  workflow_dispatch:

jobs:
  create_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # üî¢ Generar un nuevo tag para el release
      - name: Generate new version tag
        id: generate_tag
        run: |
          new_tag="releas-v1.0.0-$(date +%Y%m%d%H%M%S)"
          echo "new_tag=$new_tag" >> $GITHUB_ENV

      # üîç Obtener el √∫ltimo release cuyo NOMBRE comience con "real"
      - name: Get last release starting with "real"
        id: get_last_real_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          last_real_release=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases" | \
            jq -r '[.[] | select(.name | test("^real"))] | sort_by(.published_at) | last')

          last_real_tag=$(echo "$last_real_release" | jq -r '.tag_name')
          echo "$last_real_tag"
  
          if [[ -z "$last_real_tag" || "$last_real_tag" == "null" ]]; then
            echo "No previous 'real' release found. Skipping compare."
            exit 0
          fi
          echo "$last_real_tag"
          echo "last_real_tag=$last_real_tag" >> $GITHUB_ENV

      - name: Create Release without Notes
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.new_tag }}
          release_name: Release ${{ env.new_tag }}
          body: ""
          draft: false
          prerelease: false
          
      - name: Generate Release Notes using Compare
        id: generate_release_notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # URL para comparar los cambios entre las versiones
          compare_url="https://api.github.com/repos/${{ github.repository }}/compare/${{ env.last_real_tag }}...${{ env.new_tag }}"
          echo "$compare_url"
          # Hacer la solicitud a la API para obtener los cambios entre las versiones
          compare_data=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$compare_url")
          echo "$compare_data"
      
          # Extraer los PRs del resultado
           pr_list=$(echo "$compare_data" | jq -r '.commits[] | select(.commit.message | test("#[0-9]+")) |  "- [\(.commit.message | match("#[0-9]+").string)](https://github.com/${{ github.repository }}/pull/\(.commit.message | match("#[0-9]+").string)) from branch: \(.parents[0].sha) by @\(.author.login) in branch \(.commit.tree.sha)"')
      
          # Crear el changelog con los PRs y commits
           changelog="## What's Changed\n"
           changelog+="$pr_list\n"
      
          # Agregar el enlace al changelog completo
           changelog+="\n**Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ env.last_real_tag }}...${{ env.new_tag }}"
      
          # Guardar las notas generadas en una variable de entorno para usarla m√°s adelante
           echo "changelog<<EOF" >> $GITHUB_ENV
           echo "$changelog" >> $GITHUB_ENV
           echo "EOF" >> $GITHUB_ENV
