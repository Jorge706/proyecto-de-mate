name: Create Release and Compare to Last "real" Release

on:
  workflow_dispatch:

jobs:
  create_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # 🔢 Generar un nuevo tag para el release
      - name: Generate new version tag
        id: generate_tag
        run: |
          new_tag="releas-v1.0.0-$(date +%Y%m%d%H%M%S)"
          echo "new_tag=$new_tag" >> $GITHUB_ENV

      # 🔍 Obtener el último release cuyo NOMBRE comience con "real"

      - name: Get last release starting with "real"
        id: get_last_real_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          page=1
          last_real_tag=""

          while true; do
            echo "Fetching page $page..."
            releases_data=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases?per_page=100&page=$page")

            # Si la respuesta está vacía, terminamos
            if [[ "$releases_data" == "[]" || -z "$releases_data" ]]; then
              break
            fi

            # Buscar el release cuyo nombre comience con "real"
            last_real_release=$(echo "$releases_data" | jq -r '[.[] | select(.name | test("^real"))] | sort_by(.published_at) | last')

            # Si encontramos un release válido, tomamos su tag y salimos del bucle
            if [[ "$last_real_release" != "null" ]]; then
              last_real_tag=$(echo "$last_real_release" | jq -r '.tag_name')
              break
            fi

            # Pasar a la siguiente página
            ((page++))
          done

          echo "Last real release tag: $last_real_tag"

          if [[ -z "$last_real_tag" || "$last_real_tag" == "null" ]]; then
            echo "❌ No previous 'real' release found. Skipping compare."
            exit 0  
          fi

          echo "last_real_tag=$last_real_tag" >> $GITHUB_ENV

      # 🔍 Obtener cambios entre el último "real" release y el nuevo
      - name: Get changes between releases
        id: get_changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          notes_url="https://api.github.com/repos/${{ github.repository }}/releases/generate-notes"

          notes_data=$(curl -s -X POST "$notes_url" \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{
              "tag_name": "${{ env.new_tag }}",
              "target_commitish": "main",
              "previous_tag_name": "${{ env.last_real_tag }}",
              "configuration_file_path": ".github/custom_release_config.yml"
            }')

          echo "$last_real_tag"
          echo "data: $notes_data"

          # Guardar las notas en un archivo .md
          RELEASE_NOTES=$(echo "$notes_data" | jq -r '.body')
          echo "$RELEASE_NOTES" > release_notes.md

      - name: Post-process Release Notes
        run: |
          sed -i 's/\* \(.*\) by @\([^ ]*\) in \(https:\/\/github.com\/[^ ]*\)/\* [\1](\3) by @\2/' release_notes.md


      - name: Create Release with Generated Notes
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.new_tag }}
          release_name: Release ${{ env.new_tag }}
          body_path: ./release_notes.md
          draft: false
          prerelease: false
