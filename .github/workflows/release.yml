name: Create Release and Compare to Last "real" Release

on:
  workflow_dispatch:

jobs:
  create_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # üî¢ Generar un nuevo tag para el release
      - name: Generate new version tag
        id: generate_tag
        run: |
          new_tag="releas-v1.0.0-$(date +%Y%m%d%H%M%S)"
          echo "new_tag=$new_tag" >> $GITHUB_ENV

      # üîç Obtener el √∫ltimo release cuyo NOMBRE comience con "real"

      - name: Get last release starting with "real"
        id: get_last_real_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          page=1
          last_real_tag=""

          while true; do
            echo "Fetching page $page..."
            releases_data=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases?per_page=100&page=$page")

            # Si la respuesta est√° vac√≠a, terminamos
            if [[ "$releases_data" == "[]" || -z "$releases_data" ]]; then
              break
            fi

            # Buscar el release cuyo nombre comience con "real"
            last_real_release=$(echo "$releases_data" | jq -r '[.[] | select(.name | test("^real"))] | sort_by(.published_at) | last')

            # Si encontramos un release v√°lido, tomamos su tag y salimos del bucle
            if [[ "$last_real_release" != "null" ]]; then
              last_real_tag=$(echo "$last_real_release" | jq -r '.tag_name')
              break
            fi

            # Pasar a la siguiente p√°gina
            ((page++))
          done

          echo "Last real release tag: $last_real_tag"

          if [[ -z "$last_real_tag" || "$last_real_tag" == "null" ]]; then
            echo "‚ùå No previous 'real' release found. Skipping compare."
            exit 0
          fi

          echo "last_real_tag=$last_real_tag" >> $GITHUB_ENV


      # üîç Obtener cambios entre el √∫ltimo "real" release y el nuevo
      - name: Get changes between releases
        id: get_changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          notes_url="https://api.github.com/repos/${{ github.repository }}/releases/generate-notes"
          
          notes_data=$(curl -s -X POST "$notes_url" \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{
              "tag_name": "${{ env.new_tag }}",
              "target_commitish": "main",
              "previous_tag_name": "${{ env.last_real_tag }}"
            }')
          echo "$last_real_tag"
          echo "$notes_data"
      
          # Extraer los release notes generados
          release_notes=$(echo "$notes_data" | jq -r '.body')
      
          echo "release_notes<<EOF" >> $GITHUB_ENV
          echo "$release_notes" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Format Release Notes
        id: format_release_notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          formatted_prs=""
          
          # Extraer PRs desde las release notes generadas
          pr_lines=$(echo "${{ env.release_notes }}" | grep -Eo '\* .+ by @[^ ]+ in https://github.com/.+/pull/[0-9]+')

          for pr_line in $pr_lines; do
            # Extraer n√∫mero del PR
            pr_number=$(echo "$pr_line" | grep -Eo 'pull/[0-9]+' | cut -d'/' -f2)

            # Obtener detalles del PR desde la API
            pr_data=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/$pr_number")

            # Extraer el nombre del branch desde el PR
            branch_name=$(echo "$pr_data" | jq -r '.head.ref')

            # Insertar el nombre del branch en el formato adecuado
            formatted_pr=$(echo "$pr_line" | sed -E 's/(in https:\/\/github\.com\/.+\/pull\/[0-9]+)/\1 in branch `'"$branch_name"'`/')

            formatted_prs+="$formatted_pr"$'\n'
          done

          # Extraer el Full Changelog
          full_changelog=$(echo "${{ env.release_notes }}" | grep -Eo '\*\*Full Changelog\*\*: .*')

          echo "formatted_release_notes<<EOF" >> $GITHUB_ENV
          echo "$formatted_prs" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "full_changelog<<EOF" >> $GITHUB_ENV
          echo "$full_changelog" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV



# üì¢ Crear el Release con el changelog generado
      - name: Create Release with Changelog
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.new_tag }}
          release_name: Release ${{ env.new_tag }}
          body: |
            ${{ env.formatted_release_notes }}

            ${{ env.full_changelog }}
          draft: false
          prerelease: false
      
      # üîπ Imprimir las notas del release en la salida
      - name: Print release notes
        run: |
          echo "Release notes for the new release:"
          echo "${{ env.formatted_release_notes }}"